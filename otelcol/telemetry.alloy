declare "telemetry" {
    argument "cluster_name" {
        comment = "Name of the cluster"
    }

    argument "memory_limiter_limit" {
        comment = "Maximum amount of memory targeted to be allocated by the process heap."
        default = "1300MiB"
    }

    argument "logs_endpoint" {
        comment = "Specifies the endpoint URL where log data will be sent for storage."
    }

    argument "traces_endpoint" {
        comment = "Specifies the endpoint URL used to send distributed trace data for storage."
    }

    argument "metrics_endpoint" {
        comment = "Specifies the endpoint URL where metrics data will be sent for storage."
    }

    // ---------------------
    // ---- RECEIVERS -----
    // ---------------------

    otelcol.receiver.otlp "default" {

        http {
            endpoint = "0.0.0.0:4318"
        }

        output {
            traces = [otelcol.processor.memory_limiter.default.input]
            metrics = [otelcol.processor.memory_limiter.default.input]
            logs    = [otelcol.exporter.debug.default.input]
        }
    }

    otelcol.exporter.debug "default" {
        verbosity = "basic"
    }


    // ---------------------
    // ---- PROCESSORS -----
    // ---------------------

    otelcol.processor.memory_limiter "default" {
        check_interval = "5s"
        limit = "1300MiB"

        output {
            traces  = [otelcol.processor.k8sattributes.default.input]
            metrics = [otelcol.processor.k8sattributes.default.input]
            logs    = [otelcol.processor.k8sattributes.default.input]
        }
    }

    otelcol.processor.k8sattributes "default" {
        extract {
            metadata = [
            "k8s.deployment.name",
            "k8s.namespace.name",
            "k8s.node.name",
            "k8s.pod.name",
            "k8s.container.name",
            ]
            
            label {
            from = "pod"
            key = "owner"
            tag_name = "owner-test"
            }
        }

        pod_association {
            source {
            from = "resource_attribute"
            name = "k8s.pod.ip"
            }
        }

        // This part is different from otelcol config
        pod_association {
            source {
            from = "resource_attribute"
            name = "k8s.pod.name"
            }
            source {
            from = "resource_attribute"
            name = "k8s.namespace.name"
            }
        }

        pod_association {
            source {
            from = "connection"
            }
        }

        output {
            traces = [otelcol.processor.transform.default.input]
            metrics = [otelcol.processor.transform.default.input]
            logs = [otelcol.processor.transform.default.input]
        }
    }

    otelcol.processor.transform "default" {
        error_mode = "ignore"

        trace_statements {
            context = "resource"
            statements = [
            // TODO: We need coalesce to work for
            // Coalesce(attributes["k8s.deployment.name"], attributes["k8s.daemonset.name"], attributes["k8s.statefulset.name"], attributes["container.image.name"])
            `set(attributes["service.name"], attributes["k8s.deployment.name"])`,
             string.format("set(attributes[\"cluster\"], \"%s\")", argument.cluster_name.value),
            `set(attributes["namespace"], attributes["k8s.namespace.name"])`,
            ]
        }

        trace_statements {
            context = "resource"
            statements = [
            `keep_keys(attributes, ["cluster", "namespace", "service.name", "k8s.pod.name"])`,
            `truncate_all(attributes, 4096)`,
            ]
        }

        trace_statements {
            context = "span"
            statements = [
            `delete_key(attributes, "db.statement") where attributes["db.system"] == "redis"`,
            `delete_key(attributes, "thread.name")`,
            `truncate_all(attributes, 2048)`,
            ]
        }

        // if service.name is not dropped, mimir converts it to job label
        // refer to comment in next metric_statements block
        metric_statements {
            context  = "resource"
            statements = [
            `delete_key(attributes, "service.name")`,
            ]
        }

        // mimir converts service.namespace and service.name attributes to job=service.namespace/service.name label,
        // to workaround this these attributes copied to datapoint context.
        // for more information refer to https://grafana.com/docs/mimir/latest/configure/configure-otel-collector/#format-considerations
        metric_statements {
            context = "datapoint"
            statements = [
            `set(attributes["service.name"], resource.attributes["k8s.deployment.name"])`,
            `set(attributes["service.namespace"], resource.attributes["k8s.namespace.name"])`,
             string.format("set(attributes[\"cluster\"], \"%s\")", argument.cluster_name.value),
            ]
        }

        log_statements {
            context = "resource"
            statements = [
            `set(attributes["service.namespace"], attributes["k8s.namespace.name"])`,
            `set(attributes["service.name"], attributes["k8s.container.name"])`,
            `set(attributes["pod.name"], attributes["k8s.pod.name"])`,
             string.format("set(attributes[\"cluster\"], \"%s\")", argument.cluster_name.value),
            ]
        }

        log_statements {
            context = "resource"
            statements = [
            `keep_keys(attributes, ["cluster", "service.name", "service.namespace", "pod.name"])`,
            ]
        }

        output {
            traces = [otelcol.processor.batch.default.input]
            metrics = [otelcol.processor.batch.default.input]
            logs = [otelcol.processor.attributes.default.input]
        }
    }

    otelcol.processor.attributes "default" {
        action {
            key = "loki.resource.labels"
            action = "insert"
            value = "cluster, service.namespace, service.name"
        }
        
        output {
            logs = [otelcol.processor.batch.default.input]
        }
    }

    otelcol.processor.batch "default" {
        send_batch_size = 2048
        timeout = "200ms"
        send_batch_max_size = 8196

        output {
            traces = [otelcol.exporter.otlp.traces.input]
            metrics = [otelcol.exporter.otlphttp.metrics.input]
            logs = [otelcol.exporter.loki.default.input]
        }
    }


    // ---------------------
    // ---- EXPORTERS ------
    // ---------------------

    otelcol.exporter.otlp "traces" {
        client {
            endpoint = argument.traces_endpoint.value
            tls {
                insecure             = false
                insecure_skip_verify = true
            }
        }
    }

    otelcol.exporter.otlphttp "metrics" {
        client {
            endpoint = argument.metrics_endpoint.value

            headers = {
                "X-Scope-OrgID" = "applications",
            }
            tls {
                insecure_skip_verify = true
            }
        }
    }

    otelcol.exporter.loki "default" {
        forward_to = [loki.process.default.receiver]
    }


     // ---------------------
    // ---- LOKI ------
    // ---------------------

    loki.process "default" {
      forward_to = [loki.relabel.default.receiver]


      stage.label_keep {
        values = [ "service_namespace", "service_name", "level" ]
      }

      stage.drop {
        older_than          = "24h"
        drop_counter_reason = "too old"
      }
      
      stage.drop {
        longer_than         = "4KB"
        drop_counter_reason = "too long"
      }
    }

    loki.relabel "default" {
      forward_to = [loki.write.default.receiver]

      rule {
        action        = "keep"
        source_labels = ["level"]
        regex         = "(DEBUG|INFO|WARN|ERROR|FATAL)"
      }
    }

    loki.write "default" {
      endpoint {
        url = argument.logs_endpoint.value
        tenant_id = "applications"
        tls_config {
          insecure_skip_verify = true
        }
    }
  }
}