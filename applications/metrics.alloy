declare "metrics" {
  argument "targets" {
    comment = "The targets to be discovered"
  }

  argument "forward_to" {
    comment = "The metrics receiver to forward data to"
  }

  discovery.relabel "applications" {
    targets = argument.targets.value

    rule {
      action = "keep"
      source_labels = ["__meta_kubernetes_pod_container_port_number"]
      regex = "9464"
    }

    rule {
      action = "labelmap"
      regex = "__meta_kubernetes_(pod_label_app_io_name|pod_name)"
      replacement = "k8s_${1}"
    }

    rule {
      source_labels = ["__meta_kubernetes_namespace"]
      target_label  = "service_namespace"
      action        = "replace"
    }

    rule {
      source_labels = ["__meta_kubernetes_pod_container_name"]
      target_label  = "service_name"
      action        = "replace"
    }
  }

  prometheus.scrape "applications" {
    targets = discovery.relabel.applications.output
    forward_to = argument.forward_to.value

    clustering {
      enabled = true
    }
  }

  prometheus.relabel "applications" {
    forward_to = argument.forward_to.value

    rule {
      action = "labeldrop"
      regex  = "instance|otel_scope_name|otel_scope_version|net_host_name"
    }
  }
}
